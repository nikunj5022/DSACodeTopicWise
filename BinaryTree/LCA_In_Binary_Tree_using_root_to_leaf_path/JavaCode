class Solution {
    List<TreeNode> ans1;
    List<TreeNode> ans2;

    Solution() {
        ans1 = new ArrayList<>();
        ans2 = new ArrayList<>();
    }

    void pathRtoN(TreeNode root, TreeNode p, TreeNode q, List<TreeNode> li) {
        if (root == null) {
            return;
        }
        li.add(root);
        if (root == p) {
            ans1 = new ArrayList<>(li);
        }
        if (root == q) {
            ans2 = new ArrayList<>(li);
        }
        pathRtoN(root.left, p, q, li);
        pathRtoN(root.right, p, q, li);
        li.remove(li.size() - 1);
    }

    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        pathRtoN(root, p, q, new ArrayList<>());
        int i = 0;
        int j = 0;
        while (i < ans1.size() && j < ans2.size()) {
            if (ans1.get(i) != ans2.get(j)) {
                return ans1.get(i - 1);
            } else if (ans1.get(i) == ans2.get(j) && (i == ans1.size() - 1 || j == ans2.size() - 1)) {
                return ans1.get(i);
            }
            i++;
            j++;
        }
        return null;
    }
}