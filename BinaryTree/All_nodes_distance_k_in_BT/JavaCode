/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private List<Integer> ans;

    public Solution() {
        this.ans = new ArrayList<>();
    }

    public void helper(TreeNode target, int k, Map<TreeNode, TreeNode> parent) {
        List<Object[]> q = new ArrayList<>();
        q.add(new Object[]{target, k});

        while (!q.isEmpty()) {
            Object[] x = q.get(0);
            q.remove(0);
            TreeNode currNode = (TreeNode) x[0];
            int currK = (int) x[1];

            if (currNode.val != -1) {
                if (currK == 0) {
                    ans.add(currNode.val);
                }
                if (currK < 0) {
                    break;
                }

                if (currNode.left != null) {
                    q.add(new Object[]{currNode.left, currK - 1});
                }
                if (currNode.right != null) {
                    q.add(new Object[]{currNode.right, currK - 1});
                }
                if (parent.containsKey(currNode)) {
                    q.add(new Object[]{parent.get(currNode), currK - 1});
                }
                currNode.val = -1;
            }
        }
    }

    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        Map<TreeNode, TreeNode> parent = new HashMap<>();

        List<TreeNode> q = new ArrayList<>();
        q.add(root);

        while (!q.isEmpty()) {
            TreeNode curr = q.get(0);
            q.remove(0);

            if (curr.left != null) {
                parent.put(curr.left, curr);
                q.add(curr.left);
            }
            if (curr.right != null) {
                parent.put(curr.right, curr);
                q.add(curr.right);
            }
        }

        helper(target, k, parent);
        return ans;
    }
}